# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- develop
- master

pool:
  vmImage: ubuntu-latest
  
variables:
  pushPackageCondition: $[eq(variables['pushpackage'], true)]

steps:
- task: PowerShell@2
  displayName: Should I create a package?
  inputs:
    targetType: 'inline'
    script: |
      $pushPackage = "$(pushPackageCondition)" -eq "true"
      Write-Output "pushpackage variable is set to: $pushPackage."

      $buildNumber="$(Build.BuildNumber)"
      $sourceBranchName = "$(Build.SourceBranchName)"
      if ($buildNumber -match "\d+(?:\.\d+)*")
      {
          $buildNumberSuffix = $matches[0]
      }
      else
      {
          $buildNumberSuffix = $buildNumber
      }

      $push = $true
      if($pushPackage -ne "true")
      {
          $push = $false
          Write-Output "Package should not be created"
      }
      elseif($sourceBranchName -eq "develop")
      {
          $suffix = "prerelease-$buildNumberSuffix"
          Write-Output "Dev branch detected, packing $suffix"
      }
      elseif($sourceBranchName -eq "master")
      {
          $suffix = ""
          Write-Output "Master branch detected, packing release version"
      }
      elseif($pushPackage -eq "true")
      {
          $sourceBranchName = $sourceBranchName -replace '_', ''
          $suffix = "beta-$sourceBranchName-$buildNumberSuffix"
          Write-Output "Alpha version detected, packing $suffix"
      }
      else 
      {
          $push = $false
          Write-Output "No package required, just CI build"
      }

      if($push)
      {
          Write-Host "##vso[task.setvariable variable=pushpackage]true"
      }
      else 
      {
          Write-Host "##vso[task.setvariable variable=pushpackage]false"
      }


      Write-Host "##vso[task.setvariable variable=versionsuffix]$suffix"

- task: UseDotNet@2
  displayName: Use .NET 6.0.x
  inputs:
    packageType: 'sdk'
    version: '6.0.x'

- task: DotNetCoreCLI@2
  displayName: Restore packages
  inputs:
    command: 'restore'
    projects: |
      src\**\*.csproj
      tests\**\*.csproj
    feedsToUse: 'select'
    vstsFeed: '8187f5c9-e9c1-419f-8a5c-98285cf7633c'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: |
      src\**\*.csproj
      tests\**\*.csproj
    arguments: '--configuration $(BuildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: 'test'
    projects: 'tests\**\*.csproj'
    arguments: '--configuration $(BuildConfiguration)   --logger "trx;LogFileName=testresults.trx" --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
    publishTestResults: false

- task: PublishTestResults@2
  displayName: Publish Test Results **\testresults.trx
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**\testresults.trx'
    searchFolder: '$(Build.SourcesDirectory)'
    mergeTestResults: true